// src/redux/slices/bookingSlice.js

import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import {bookRestaurant} from '../../api/booking'; // Adjust path if needed

// Define the initial state for this slice
const initialState = {
    /** Status of the last booking attempt: 'idle', 'loading', 'succeeded', 'failed' */
    status: 'idle',
    /** Stores error message if the last attempt failed */
    error: null,
    /** Stores confirmation data if the last attempt succeeded */
    confirmation: null,
};

// Create an async thunk for the booking API call
// First argument: string action type prefix ('booking/create')
// Second argument: async payload creator function
export const createBookingThunk = createAsyncThunk(
    'booking/create',
    async (bookingData, { rejectWithValue }) => {
        // bookingData should contain everything needed for the API call
        // (customerId, restaurantId, tableId, startSlotTime, endSlotTime, date)
        try {
            // Call the API function we defined earlier
            // The value returned here will be the `fulfilled` action payload
            return await bookRestaurant(bookingData); // response already contains response.data due to previous api definition
        } catch (error) {
            // If the API call fails, return a rejected value
            // Use rejectWithValue to provide a standardized error payload
            console.error("Thunk Error:", error);
            return rejectWithValue(error.response?.data || error.message || 'Booking failed');
        }
    }
);

// Create the slice
const bookingSlice = createSlice({
    name: 'booking',
    initialState,
    // Standard reducers for synchronous actions (e.g., resetting state)
    reducers: {
        resetBookingStatus: (state) => {
            state.status = 'idle';
            state.error = null;
            state.confirmation = null;
        },
        // You could add other reducers here if needed
    },
    // Reducers for handling actions generated by createAsyncThunk
    extraReducers: (builder) => {
        builder
            // When the thunk request starts
            .addCase(createBookingThunk.pending, (state) => {
                state.status = 'loading';
                state.error = null; // Clear previous errors
                state.confirmation = null; // Clear previous confirmation
            })
            // When the thunk request succeeds
            .addCase(createBookingThunk.fulfilled, (state, action) => {
                state.status = 'succeeded';
                state.confirmation = action.payload; // Store the successful response data
            })
            // When the thunk request fails
            .addCase(createBookingThunk.rejected, (state, action) => {
                state.status = 'failed';
                state.error = action.payload; // Store the error payload from rejectWithValue
            });
    },
});

// Export the synchronous action creators
export const { resetBookingStatus } = bookingSlice.actions;

// Export the reducer function for the store
export default bookingSlice.reducer;